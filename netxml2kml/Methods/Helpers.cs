using System.Xml;
using System.Xml.Serialization;
using netxml2kml.Models;

namespace netxml2kml.Methods;

public static class Helpers
{
    public static WirelessNetwork[] DeserializeXml(FileInfo inputFile)
    {
        /* Deserialize to MonoXSD autogenerated class model */
        
        var xmlSerializer = new XmlSerializer(typeof(detectionrun));
        var detectionRun = (detectionrun?) xmlSerializer.Deserialize(
            XmlReader.Create(inputFile.OpenRead(),
                new XmlReaderSettings {DtdProcessing = DtdProcessing.Parse}));

        /* Convert machine deserialization to readable class format */

        var wirelessNetworks =
            new WirelessNetwork[detectionRun!.wirelessnetwork.Count(wn =>
                wn.type != "probe")];

        for (int i = 0; i < detectionRun.wirelessnetwork.Length; i++)
        {
            var detectionRunWirelessNetwork = detectionRun.wirelessnetwork[i];

            // If wireless network is a client – skip
            if (detectionRunWirelessNetwork.type == "probe")
            {
                continue;
            }
            
            wirelessNetworks[i] = new()
            {
                Essid = detectionRunWirelessNetwork.SSID.First().essid?.First().Value,
                Encryption = detectionRunWirelessNetwork.SSID.First().encryption?.Last()?.Value,
                Bssid = detectionRunWirelessNetwork.BSSID,
                Manufacturer = detectionRunWirelessNetwork.manuf,
                FrequencyMhz = Math.Round(Double.Parse(detectionRunWirelessNetwork.freqmhz.Substring(0, 2)) / 10, 1, MidpointRounding.ToPositiveInfinity),
                MaxSignalDbm = Int32.Parse(detectionRunWirelessNetwork.snrinfo.First().max_signal_dbm),
                MaxLatitude = Double.Parse(detectionRunWirelessNetwork.gpsinfo.First().maxlat),
                MaxLongitude = Double.Parse(detectionRunWirelessNetwork.gpsinfo.First().maxlon),
                MaxAltitude = Double.Parse(detectionRunWirelessNetwork.gpsinfo.First().maxalt),
                FirstSeenDate = StringToDate(detectionRunWirelessNetwork.firsttime),
                LastUpdateDate = StringToDate(detectionRunWirelessNetwork.lasttime)
            };

            // If wireless network has no clients – continue
            if (detectionRunWirelessNetwork.wirelessclient == null)
            {
                continue;
            }

            var wirelessConnections = new List<WirelessConnection>(detectionRunWirelessNetwork.wirelessclient.Length);

            foreach (var wc in detectionRunWirelessNetwork.wirelessclient)
            {
                wirelessConnections.Add(new WirelessConnection
                {
                    WirelessClient = new WirelessClient
                    {
                        Mac = wc.clientmac,
                        Manufacturer = wc.clientmanuf,
                        FirstSeenDate = StringToDate(wc.firsttime),
                        LastUpdateDate = StringToDate(wc.lasttime)
                    },
                    WirelessNetwork = wirelessNetworks[i]
                });
            }

            wirelessNetworks[i].WirelessConnections = wirelessConnections;
        }

        return wirelessNetworks;
    }

    public static DateTime StringToDate(string dateString)
    {
        var monthNameNumber = new Dictionary<string, int>
        {
            {"Jan", 1},
            {"Feb", 2},
            {"Mar", 3},
            {"Apr", 4},
            {"May", 5},
            {"Jun", 6},
            {"Jul", 7},
            {"Aug", 8},
            {"Sep", 9},
            {"Oct", 10},
            {"Nov", 11},
            {"Dec", 12},
        };

        var year = Int32.Parse(dateString.Split(" ")[4]);
        var month = monthNameNumber[dateString.Split(" ")[1]];
        var day = Int32.Parse(dateString.Split(" ")[2]);
        var hour = Int32.Parse(dateString.Split(" ")[3].Split(":")[0]);
        var minute = Int32.Parse(dateString.Split(" ")[3].Split(":")[1]);
        var second = Int32.Parse(dateString.Split(" ")[3].Split(":")[2]);

        return new DateTime(year, month, day, hour, minute, second);
    }
}